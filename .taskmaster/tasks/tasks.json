{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 구조화",
        "description": "Next.js 14와 NestJS 프로젝트 초기 설정 및 기본 구조 구성",
        "details": "1. Next.js 14 프로젝트 생성 (App Router 사용)\n2. NestJS 프로젝트 생성\n3. PostgreSQL 연결 설정\n4. 기본 폴더 구조 설정 (frontend: pages, components, hooks, utils, styles; backend: modules, controllers, services, entities)\n5. 공통 환경 변수 설정 (.env 파일 구성)\n6. TypeScript 설정 및 타입 정의\n7. ESLint, Prettier 설정\n8. Git 저장소 초기화 및 .gitignore 설정",
        "testStrategy": "각 프로젝트 빌드 및 실행 테스트, 데이터베이스 연결 테스트, 환경 변수 로드 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Next.js 14 프로젝트 생성 및 기본 구조 설정",
            "description": "App Router를 사용하는 Next.js 14 프로젝트를 생성하고 기본 폴더 구조를 설정합니다.",
            "dependencies": [],
            "details": "1. create-next-app을 사용하여 Next.js 14 프로젝트 생성: `npx create-next-app@latest frontend --typescript --eslint --app --tailwind --src-dir`\n2. 기본 폴더 구조 생성: components, hooks, utils, styles 폴더 생성\n3. components 폴더 내부에 common, layout, auth 등 하위 폴더 구성\n4. 기본 레이아웃 컴포넌트 생성 (app/layout.tsx)\n5. 홈페이지 구현 (app/page.tsx)",
            "status": "done",
            "testStrategy": "Next.js 개발 서버 실행 테스트 (`npm run dev`), 기본 페이지 로드 확인"
          },
          {
            "id": 2,
            "title": "NestJS 프로젝트 생성 및 기본 구조 설정",
            "description": "NestJS 프로젝트를 생성하고 모듈, 컨트롤러, 서비스 등의 기본 구조를 설정합니다.",
            "dependencies": [],
            "details": "1. NestJS CLI 설치: `npm i -g @nestjs/cli`\n2. NestJS 프로젝트 생성: `nest new backend`\n3. 기본 폴더 구조 확인 및 필요한 모듈 폴더 생성 (modules, controllers, services, entities)\n4. 공통 모듈 생성 (common 폴더에 dto, interfaces, guards, decorators 등 생성)\n5. 기본 AppModule 설정 및 main.ts 구성",
            "status": "done",
            "testStrategy": "NestJS 서버 실행 테스트 (`npm run start:dev`), 기본 엔드포인트 응답 확인"
          },
          {
            "id": 3,
            "title": "PostgreSQL 연결 설정",
            "description": "NestJS 백엔드에서 PostgreSQL 데이터베이스 연결을 설정합니다.",
            "dependencies": [
              "1.2"
            ],
            "details": "1. 필요한 패키지 설치: `npm install --save @nestjs/typeorm typeorm pg`\n2. TypeORM 설정 파일 생성 (ormconfig.js 또는 app.module.ts 내 설정)\n3. 데이터베이스 연결 설정 (host, port, username, password, database 등)\n4. 환경 변수를 통한 데이터베이스 연결 정보 관리\n5. 데이터베이스 연결 테스트 로직 구현",
            "status": "done",
            "testStrategy": "데이터베이스 연결 테스트, 간단한 쿼리 실행 테스트"
          },
          {
            "id": 4,
            "title": "환경 변수 설정 및 관리",
            "description": "프론트엔드와 백엔드에서 사용할 환경 변수를 설정하고 관리하는 시스템을 구축합니다.",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "1. 백엔드 .env 파일 생성 및 구성 (DB_HOST, DB_PORT, DB_USERNAME, DB_PASSWORD, DB_DATABASE, JWT_SECRET 등)\n2. 프론트엔드 .env.local 파일 생성 및 구성 (NEXT_PUBLIC_API_URL 등)\n3. NestJS ConfigModule 설정 (환경 변수 유효성 검사 포함)\n4. Next.js에서 환경 변수 사용 설정\n5. 개발/테스트/프로덕션 환경별 환경 변수 관리 전략 수립\n6. .env.example 파일 생성",
            "status": "done",
            "testStrategy": "환경 변수 로드 테스트, 환경 변수 유효성 검사 테스트"
          },
          {
            "id": 5,
            "title": "TypeScript 설정 및 타입 정의",
            "description": "프론트엔드와 백엔드에서 사용할 TypeScript 설정 및 공통 타입을 정의합니다.",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "1. 프론트엔드 tsconfig.json 설정 최적화\n2. 백엔드 tsconfig.json 설정 최적화\n3. 공통 타입 정의 (사용자, 인증 관련 타입 등)\n4. 프론트엔드 타입 정의 파일 구성 (types 폴더 생성)\n5. 백엔드 DTO 및 엔티티 타입 정의\n6. API 응답 타입 정의",
            "status": "done",
            "testStrategy": "TypeScript 컴파일 테스트, 타입 오류 검사"
          },
          {
            "id": 6,
            "title": "ESLint 및 Prettier 설정",
            "description": "코드 품질과 일관성을 유지하기 위한 ESLint 및 Prettier 설정을 구성합니다.",
            "dependencies": [
              "1.1",
              "1.2",
              "1.5"
            ],
            "details": "1. 프론트엔드 ESLint 설정 (.eslintrc.js)\n2. 백엔드 ESLint 설정 (.eslintrc.js)\n3. Prettier 설정 (.prettierrc)\n4. ESLint와 Prettier 통합 설정\n5. 프론트엔드 및 백엔드 공통 린트 규칙 정의\n6. 프로젝트별 특화된 린트 규칙 정의\n7. lint 및 format 스크립트 추가 (package.json)",
            "status": "done",
            "testStrategy": "린트 검사 실행 테스트 (`npm run lint`), 포맷팅 테스트 (`npm run format`)"
          },
          {
            "id": 7,
            "title": "Git 저장소 초기화 및 설정",
            "description": "Git 저장소를 초기화하고 .gitignore 및 기타 Git 관련 설정을 구성합니다.",
            "dependencies": [],
            "details": "1. Git 저장소 초기화: `git init`\n2. .gitignore 파일 생성 및 설정 (node_modules, .env, .next, dist 등 제외)\n3. .gitattributes 파일 설정\n4. GitHub 저장소 생성 및 연결\n5. 초기 커밋 생성\n6. 브랜치 전략 수립 (main, develop, feature 등)\n7. GitHub Actions 기본 워크플로우 설정 (.github/workflows 폴더)",
            "status": "done",
            "testStrategy": "Git 저장소 상태 확인, .gitignore 적용 테스트"
          },
          {
            "id": 8,
            "title": "프로젝트 문서화 및 README 작성",
            "description": "프로젝트 설정, 구조, 실행 방법 등을 문서화하고 README 파일을 작성합니다.",
            "dependencies": [
              "1.1",
              "1.2",
              "1.3",
              "1.4",
              "1.5",
              "1.6",
              "1.7"
            ],
            "details": "1. 프로젝트 루트에 README.md 파일 작성\n2. 프로젝트 개요 및 목적 설명\n3. 기술 스택 및 아키텍처 설명\n4. 설치 및 실행 방법 문서화\n5. 환경 변수 설정 방법 설명\n6. API 문서화 방법 설명 (Swagger 등)\n7. 개발 가이드라인 작성\n8. 폴더 구조 설명\n9. 기여 방법 안내",
            "status": "done",
            "testStrategy": "README 내용 검토, 설치 및 실행 지침 테스트"
          }
        ]
      },
      {
        "id": 2,
        "title": "데이터베이스 스키마 설계",
        "description": "PostgreSQL 데이터베이스 스키마 설계 및 마이그레이션 설정",
        "details": "1. 사용자(User) 테이블 설계: id, email, password(해시), nickname, avatar, created_at, updated_at\n2. 스튜디오(Studio) 테이블 설계: id, name, description, created_by, created_at, updated_at\n3. 스튜디오 멤버(StudioMember) 테이블 설계: id, studio_id, user_id, role(enum: admin, editor, viewer), created_at\n4. 프로젝트(Project) 테이블 설계: id, studio_id, name, description, status(enum: planning, in_progress, review, completed), category(enum: webtoon, illustration, storyboard, concept), created_at, updated_at, deleted_at\n5. 씬(Scene) 테이블 설계: id, project_id, title, order, created_by, created_at, updated_at\n6. 파일(File) 테이블 설계: id, scene_id, version, file_path, thumbnail_path, file_type, created_by, created_at\n7. 댓글(Comment) 테이블 설계: id, file_id, user_id, parent_id, content, position_x, position_y, created_at, updated_at\n8. 알림(Notification) 테이블 설계: id, user_id, type, content, is_read, related_id, created_at\n9. TypeORM 엔티티 정의 및 관계 설정\n10. 마이그레이션 스크립트 작성",
        "testStrategy": "테이블 생성 검증, 관계 설정 검증, 샘플 데이터 삽입 및 조회 테스트, 마이그레이션 롤백 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "사용자 및 인증 관련 테이블 설계",
            "description": "사용자(User) 테이블과 관련 인증 필드 설계 및 TypeORM 엔티티 정의",
            "dependencies": [],
            "details": "User 엔티티 생성: id(UUID), email(unique), password(해시), nickname, avatar(URL), created_at, updated_at 필드 포함. 인덱스는 email과 nickname에 생성. TypeORM @Entity, @Column 데코레이터 사용하여 정의. 비밀번호 필드에는 @BeforeInsert, @BeforeUpdate 훅을 사용하여 bcrypt 해싱 로직 구현.",
            "status": "pending",
            "testStrategy": "엔티티 유효성 검사, 필드 타입 검증, 인덱스 생성 확인, 비밀번호 해싱 기능 테스트"
          },
          {
            "id": 2,
            "title": "스튜디오 및 멤버십 테이블 설계",
            "description": "스튜디오(Studio)와 스튜디오 멤버(StudioMember) 테이블 설계 및 관계 정의",
            "dependencies": [
              "2.1"
            ],
            "details": "Studio 엔티티: id(UUID), name, description, created_by(User 외래키), created_at, updated_at 필드 포함. StudioMember 엔티티: id(UUID), studio_id(Studio 외래키), user_id(User 외래키), role(enum: admin, editor, viewer), created_at 필드 포함. @ManyToOne, @OneToMany 데코레이터로 User-Studio, Studio-StudioMember 관계 설정. role 필드는 TypeORM enum 타입으로 정의.",
            "status": "pending",
            "testStrategy": "관계 설정 검증, 외래키 제약조건 테스트, enum 값 유효성 검사"
          },
          {
            "id": 3,
            "title": "프로젝트 테이블 설계",
            "description": "프로젝트(Project) 테이블 설계 및 스튜디오와의 관계 정의",
            "dependencies": [
              "2.2"
            ],
            "details": "Project 엔티티: id(UUID), studio_id(Studio 외래키), name, description, status(enum: planning, in_progress, review, completed), category(enum: webtoon, illustration, storyboard, concept), created_at, updated_at, deleted_at(소프트 삭제용) 필드 포함. @ManyToOne 데코레이터로 Studio-Project 관계 설정. TypeORM @DeleteDateColumn으로 소프트 삭제 구현. status와 category는 enum 타입으로 정의하고 인덱스 추가.",
            "status": "pending",
            "testStrategy": "소프트 삭제 기능 테스트, enum 필드 제약조건 검증, 관계 설정 테스트"
          },
          {
            "id": 4,
            "title": "씬 테이블 설계",
            "description": "씬(Scene) 테이블 설계 및 프로젝트와의 관계 정의",
            "dependencies": [
              "2.3"
            ],
            "details": "Scene 엔티티: id(UUID), project_id(Project 외래키), title, order(정렬용 숫자), created_by(User 외래키), created_at, updated_at 필드 포함. @ManyToOne 데코레이터로 Project-Scene, User-Scene 관계 설정. order 필드에 인덱스 추가하여 정렬 성능 최적화. 씬 순서 변경 시 사용할 메서드 추가(updateOrder).",
            "status": "pending",
            "testStrategy": "씬 순서 정렬 테스트, 프로젝트-씬 관계 검증, 씬 생성 및 조회 테스트"
          },
          {
            "id": 5,
            "title": "파일 테이블 설계",
            "description": "파일(File) 테이블 설계 및 씬과의 관계 정의",
            "dependencies": [
              "2.4"
            ],
            "details": "File 엔티티: id(UUID), scene_id(Scene 외래키), version(버전 번호), file_path(저장 경로), thumbnail_path(썸네일 경로), file_type(파일 유형), created_by(User 외래키), created_at 필드 포함. @ManyToOne 데코레이터로 Scene-File, User-File 관계 설정. version과 scene_id에 복합 인덱스 추가하여 특정 씬의 파일 버전 조회 최적화.",
            "status": "pending",
            "testStrategy": "파일 버전 관리 테스트, 경로 저장 및 조회 테스트, 씬-파일 관계 검증"
          },
          {
            "id": 6,
            "title": "댓글 테이블 설계",
            "description": "댓글(Comment) 테이블 설계 및 파일, 사용자와의 관계 정의",
            "dependencies": [
              "2.5",
              "2.1"
            ],
            "details": "Comment 엔티티: id(UUID), file_id(File 외래키), user_id(User 외래키), parent_id(자기참조 외래키, 대댓글용), content, position_x, position_y(이미지 위치 좌표), created_at, updated_at 필드 포함. @ManyToOne 데코레이터로 File-Comment, User-Comment 관계 설정. 대댓글 구현을 위한 self-referencing 관계 설정(@ManyToOne, @OneToMany). file_id와 user_id에 인덱스 추가.",
            "status": "pending",
            "testStrategy": "대댓글 구조 테스트, 좌표 저장 및 조회 테스트, 댓글 트리 구조 조회 테스트"
          },
          {
            "id": 7,
            "title": "알림 테이블 설계",
            "description": "알림(Notification) 테이블 설계 및 사용자와의 관계 정의",
            "dependencies": [
              "2.1"
            ],
            "details": "Notification 엔티티: id(UUID), user_id(User 외래키), type(enum: comment, mention, invite, update 등), content, is_read(boolean), related_id(관련 엔티티 ID), created_at 필드 포함. @ManyToOne 데코레이터로 User-Notification 관계 설정. user_id와 is_read에 복합 인덱스 추가하여 읽지 않은 알림 조회 최적화. type은 enum 타입으로 정의.",
            "status": "pending",
            "testStrategy": "알림 타입별 생성 테스트, 읽음 상태 변경 테스트, 사용자별 알림 조회 테스트"
          },
          {
            "id": 8,
            "title": "TypeORM 엔티티 관계 설정",
            "description": "모든 테이블 간의 관계 설정 및 TypeORM 엔티티 관계 매핑 구현",
            "dependencies": [
              "2.1",
              "2.2",
              "2.3",
              "2.4",
              "2.5",
              "2.6",
              "2.7"
            ],
            "details": "모든 엔티티 간 관계 설정 완료: User-Studio(OneToMany), Studio-StudioMember(OneToMany), Studio-Project(OneToMany), Project-Scene(OneToMany), Scene-File(OneToMany), File-Comment(OneToMany), User-Notification(OneToMany), Comment-Comment(자기참조). 양방향 관계가 필요한 경우 @JoinColumn과 함께 관계 데코레이터 설정. 캐스케이드 옵션 적절히 설정(예: 프로젝트 삭제 시 씬도 삭제).",
            "status": "pending",
            "testStrategy": "모든 관계 조인 쿼리 테스트, 캐스케이드 동작 테스트, 양방향 관계 데이터 로드 테스트"
          },
          {
            "id": 9,
            "title": "마이그레이션 스크립트 작성",
            "description": "TypeORM 마이그레이션 스크립트 작성 및 설정",
            "dependencies": [
              "2.8"
            ],
            "details": "TypeORM CLI 설정(ormconfig.js 또는 data-source.ts). 마이그레이션 생성 명령어 설정(npm script). 초기 마이그레이션 스크립트 생성(typeorm migration:generate). 각 테이블 생성 SQL이 포함된 마이그레이션 파일 검토 및 수정. 롤백 시나리오 고려하여 down 메서드 구현. 인덱스 및 외래키 제약조건 확인.",
            "status": "pending",
            "testStrategy": "마이그레이션 실행 테스트(up), 롤백 테스트(down), 데이터베이스 스키마 검증"
          },
          {
            "id": 10,
            "title": "데이터베이스 시드 데이터 구현",
            "description": "개발 및 테스트용 초기 데이터 시드 스크립트 작성",
            "dependencies": [
              "2.9"
            ],
            "details": "개발 환경용 시드 데이터 스크립트 작성. 테스트 사용자, 스튜디오, 프로젝트, 씬 등 기본 데이터 생성. Factory 패턴 사용하여 테스트 데이터 생성 함수 구현. 시드 데이터 실행 명령어 npm script로 추가. 환경별(개발/테스트) 시드 데이터 분리. 관계가 있는 데이터는 순서대로 생성되도록 구현.",
            "status": "pending",
            "testStrategy": "시드 데이터 삽입 테스트, 관계 데이터 정확성 검증, 중복 실행 시 오류 방지 테스트"
          }
        ]
      },
      {
        "id": 3,
        "title": "인증 시스템 구현 - 백엔드",
        "description": "JWT 기반 인증 시스템 백엔드 구현",
        "details": "1. NestJS Auth 모듈 생성\n2. 사용자 엔티티 및 서비스 구현\n3. 비밀번호 해싱 (bcrypt) 구현\n4. JWT 전략 구현 (access token, refresh token)\n5. 로그인 엔드포인트 구현 (/auth/login)\n6. 회원가입 엔드포인트 구현 (/auth/register)\n7. 이메일 인증 시스템 구현 (nodemailer 사용)\n8. 비밀번호 재설정 기능 구현\n9. Remember Me 기능 구현 (7일 유효 토큰)\n10. 프로필 업데이트 엔드포인트 구현\n11. 인증 가드 및 데코레이터 구현",
        "testStrategy": "단위 테스트: 사용자 생성, 로그인, 토큰 검증\n통합 테스트: 인증 플로우 전체 테스트\n이메일 발송 테스트\n토큰 만료 및 갱신 테스트",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "NestJS Auth 모듈 및 사용자 엔티티 구현",
            "description": "NestJS Auth 모듈을 생성하고 사용자 엔티티 및 관련 서비스를 구현합니다.",
            "dependencies": [],
            "details": "1. Auth 모듈 생성 (nest g module auth)\n2. User 엔티티 구현 (id, email, password, nickname, isEmailVerified, refreshToken, createdAt, updatedAt 필드 포함)\n3. TypeORM 설정에 User 엔티티 등록\n4. UserService 구현 (사용자 생성, 조회, 업데이트 메소드 포함)\n5. UserRepository 구현",
            "status": "pending",
            "testStrategy": "User 엔티티 CRUD 작업에 대한 단위 테스트 작성, 데이터베이스 연결 및 쿼리 테스트"
          },
          {
            "id": 2,
            "title": "비밀번호 해싱 및 JWT 전략 구현",
            "description": "bcrypt를 사용한 비밀번호 해싱과 JWT 인증 전략(access token, refresh token)을 구현합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "1. bcrypt 패키지 설치 및 설정\n2. 비밀번호 해싱 유틸리티 함수 구현 (해싱, 비교)\n3. JWT 모듈 설치 및 설정 (access token, refresh token)\n4. JWT 전략 구현 (JwtStrategy 클래스)\n5. JWT 가드 구현 (JwtAuthGuard)\n6. RefreshToken 전략 및 가드 구현\n7. 토큰 발급 및 검증 서비스 구현",
            "status": "pending",
            "testStrategy": "비밀번호 해싱/비교 테스트, JWT 토큰 생성/검증 테스트, 토큰 만료 테스트"
          },
          {
            "id": 3,
            "title": "로그인 및 회원가입 엔드포인트 구현",
            "description": "사용자 인증을 위한 로그인(/auth/login)과 회원가입(/auth/register) 엔드포인트를 구현합니다.",
            "dependencies": [
              "3.2"
            ],
            "details": "1. AuthController 생성\n2. 로그인 DTO 구현 (LoginDto)\n3. 회원가입 DTO 구현 (RegisterDto)\n4. 로그인 엔드포인트 구현 (/auth/login)\n5. 회원가입 엔드포인트 구현 (/auth/register)\n6. 입력 유효성 검사 (class-validator 사용)\n7. 로그인 성공 시 access token과 refresh token 반환\n8. Remember Me 기능 구현 (7일 유효 토큰)",
            "status": "pending",
            "testStrategy": "로그인/회원가입 엔드포인트 통합 테스트, 유효하지 않은 입력에 대한 오류 처리 테스트, 토큰 발급 테스트"
          },
          {
            "id": 4,
            "title": "이메일 인증 시스템 구현",
            "description": "nodemailer를 사용하여 사용자 이메일 인증 시스템을 구현합니다.",
            "dependencies": [
              "3.3"
            ],
            "details": "1. nodemailer 패키지 설치 및 설정\n2. 이메일 서비스 구현 (EmailService)\n3. 이메일 템플릿 구현 (확인 이메일)\n4. 이메일 인증 토큰 생성 및 저장 로직 구현\n5. 이메일 인증 엔드포인트 구현 (/auth/verify-email)\n6. 회원가입 시 인증 이메일 발송 로직 추가\n7. 이메일 인증 상태 확인 로직 구현",
            "status": "pending",
            "testStrategy": "이메일 발송 테스트, 인증 토큰 검증 테스트, 이메일 템플릿 렌더링 테스트"
          },
          {
            "id": 5,
            "title": "비밀번호 재설정 기능 구현",
            "description": "사용자가 비밀번호를 잊어버렸을 때 재설정할 수 있는 기능을 구현합니다.",
            "dependencies": [
              "3.4"
            ],
            "details": "1. 비밀번호 재설정 요청 DTO 구현 (ForgotPasswordDto)\n2. 비밀번호 재설정 DTO 구현 (ResetPasswordDto)\n3. 비밀번호 재설정 요청 엔드포인트 구현 (/auth/forgot-password)\n4. 비밀번호 재설정 엔드포인트 구현 (/auth/reset-password)\n5. 비밀번호 재설정 토큰 생성 및 저장 로직 구현\n6. 비밀번호 재설정 이메일 템플릿 구현\n7. 비밀번호 재설정 이메일 발송 로직 구현",
            "status": "pending",
            "testStrategy": "비밀번호 재설정 플로우 통합 테스트, 토큰 유효성 검사 테스트, 이메일 발송 테스트"
          },
          {
            "id": 6,
            "title": "프로필 업데이트 엔드포인트 구현",
            "description": "사용자가 자신의 프로필 정보를 업데이트할 수 있는 엔드포인트를 구현합니다.",
            "dependencies": [
              "3.3"
            ],
            "details": "1. 프로필 업데이트 DTO 구현 (UpdateProfileDto)\n2. 프로필 조회 엔드포인트 구현 (/auth/profile)\n3. 프로필 업데이트 엔드포인트 구현 (/auth/profile)\n4. 비밀번호 변경 DTO 구현 (ChangePasswordDto)\n5. 비밀번호 변경 엔드포인트 구현 (/auth/change-password)\n6. 프로필 이미지 업로드 기능 구현 (선택적)\n7. 사용자 정보 업데이트 서비스 구현",
            "status": "pending",
            "testStrategy": "프로필 업데이트 엔드포인트 테스트, 비밀번호 변경 테스트, 입력 유효성 검사 테스트"
          },
          {
            "id": 7,
            "title": "인증 가드 및 데코레이터 구현",
            "description": "인증이 필요한 엔드포인트를 보호하기 위한 가드와 데코레이터를 구현합니다.",
            "dependencies": [
              "3.2"
            ],
            "details": "1. 인증 가드 구현 (AuthGuard)\n2. 역할 기반 가드 구현 (RolesGuard)\n3. 현재 사용자 데코레이터 구현 (CurrentUser)\n4. 공개/비공개 엔드포인트 구분 로직 구현\n5. 인증 메타데이터 설정 데코레이터 구현 (Public, Roles)\n6. 가드 전역 적용 설정\n7. 인증 예외 처리 로직 구현",
            "status": "pending",
            "testStrategy": "가드 동작 테스트, 데코레이터 기능 테스트, 인증 실패 시나리오 테스트"
          },
          {
            "id": 8,
            "title": "토큰 갱신 및 로그아웃 기능 구현",
            "description": "Refresh 토큰을 사용한 Access 토큰 갱신 및 로그아웃 기능을 구현합니다.",
            "dependencies": [
              "3.2",
              "3.3"
            ],
            "details": "1. 토큰 갱신 엔드포인트 구현 (/auth/refresh)\n2. Refresh 토큰 검증 및 새 Access 토큰 발급 로직 구현\n3. 로그아웃 엔드포인트 구현 (/auth/logout)\n4. 로그아웃 시 Refresh 토큰 무효화 로직 구현\n5. 토큰 블랙리스트 관리 (선택적)\n6. 다중 기기 로그인 처리 로직 구현\n7. 토큰 만료 처리 로직 구현",
            "status": "pending",
            "testStrategy": "토큰 갱신 플로우 테스트, 로그아웃 기능 테스트, 만료된 토큰 처리 테스트, 다중 기기 로그인/로그아웃 테스트"
          }
        ]
      },
      {
        "id": 4,
        "title": "인증 시스템 구현 - 프론트엔드",
        "description": "Next.js에서 인증 시스템 프론트엔드 구현",
        "details": "1. 로그인 페이지 구현 (/login)\n2. 회원가입 페이지 구현 (/register)\n3. 이메일 인증 페이지 구현 (/verify-email)\n4. 비밀번호 재설정 페이지 구현 (/reset-password)\n5. 프로필 페이지 구현 (/profile)\n6. 인증 상태 관리 (React Context API 또는 Redux 사용)\n7. JWT 토큰 저장 및 관리 (쿠키 또는 localStorage)\n8. 인증 API 호출 함수 구현\n9. 보호된 라우트 구현 (인증 필요한 페이지)\n10. Remember Me 체크박스 및 기능 구현\n11. 로그아웃 기능 구현",
        "testStrategy": "컴포넌트 테스트: 각 폼 유효성 검사\n통합 테스트: 로그인/회원가입 플로우\n인증 상태 유지 테스트\n보호된 라우트 접근 테스트",
        "priority": "high",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "스튜디오 관리 기능 - 백엔드",
        "description": "스튜디오 생성, 관리, 멤버 초대 등의 백엔드 기능 구현",
        "details": "1. Studio 모듈 생성\n2. Studio 컨트롤러 및 서비스 구현\n3. 스튜디오 CRUD 엔드포인트 구현\n4. 멤버 초대 시스템 구현 (이메일 발송)\n5. 초대 링크 생성 및 관리 기능\n6. 역할 기반 권한 관리 시스템 구현 (Admin, Editor, Viewer)\n7. 스튜디오 통계 API 구현\n8. 활동 로그 기록 및 조회 API 구현\n9. 스튜디오 설정 관리 API 구현\n10. 권한 검사 미들웨어 구현",
        "testStrategy": "단위 테스트: 스튜디오 생성, 수정, 삭제\n통합 테스트: 멤버 초대 및 권한 관리\n권한 기반 접근 제어 테스트\n이메일 초대 기능 테스트",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "스튜디오 관리 기능 - 프론트엔드",
        "description": "스튜디오 생성, 관리, 멤버 초대 등의 프론트엔드 기능 구현",
        "details": "1. 스튜디오 목록 페이지 구현 (/studios)\n2. 스튜디오 생성 페이지 구현 (/studios/create)\n3. 스튜디오 상세 페이지 구현 (/studios/[id])\n4. 스튜디오 설정 페이지 구현 (/studios/[id]/settings)\n5. 멤버 관리 인터페이스 구현 (/studios/[id]/members)\n6. 초대 링크 생성 및 복사 기능 구현\n7. 이메일 초대 폼 구현\n8. 역할 변경 드롭다운 구현\n9. 스튜디오 대시보드 구현 (통계, 활동 피드)\n10. 권한 기반 UI 조건부 렌더링",
        "testStrategy": "컴포넌트 테스트: 각 페이지 렌더링\n통합 테스트: 스튜디오 생성 및 관리 플로우\n권한 기반 UI 테스트\n초대 링크 생성 및 복사 기능 테스트",
        "priority": "high",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "프로젝트 관리 기능 - 백엔드",
        "description": "프로젝트 CRUD 및 상태 관리 백엔드 기능 구현",
        "details": "1. Project 모듈 생성\n2. Project 컨트롤러 및 서비스 구현\n3. 프로젝트 CRUD 엔드포인트 구현\n4. 프로젝트 상태 관리 API 구현 (planning, in_progress, review, completed)\n5. 소프트 삭제 구현 (deleted_at 필드 사용)\n6. 즉시 삭제 기능 구현\n7. 프로젝트 초대 코드 생성 및 검증 API\n8. 프로젝트 카테고리 관리 API 구현 (webtoon, illustration, storyboard, concept)\n9. 프로젝트 필터링 및 정렬 API 구현\n10. 프로젝트 접근 권한 검사 미들웨어 구현",
        "testStrategy": "단위 테스트: 프로젝트 생성, 수정, 삭제\n통합 테스트: 상태 변경 및 카테고리 관리\n소프트 삭제 및 복구 테스트\n초대 코드 생성 및 검증 테스트",
        "priority": "high",
        "dependencies": [
          2,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "프로젝트 관리 기능 - 프론트엔드",
        "description": "프로젝트 CRUD 및 상태 관리 프론트엔드 기능 구현",
        "details": "1. 프로젝트 목록 페이지 구현 (/studios/[id]/projects)\n2. 프로젝트 생성 페이지 구현 (/studios/[id]/projects/create)\n3. 프로젝트 상세 페이지 구현 (/studios/[id]/projects/[projectId])\n4. 프로젝트 설정 페이지 구현 (/studios/[id]/projects/[projectId]/settings)\n5. 상태 변경 드롭다운 구현\n6. 카테고리 선택 UI 구현\n7. 프로젝트 삭제 및 복구 UI 구현\n8. 초대 코드 생성 및 공유 UI 구현\n9. 프로젝트 필터링 및 정렬 UI 구현\n10. 프로젝트 카드 컴포넌트 구현",
        "testStrategy": "컴포넌트 테스트: 각 페이지 렌더링\n통합 테스트: 프로젝트 생성 및 관리 플로우\n상태 변경 테스트\n필터링 및 정렬 기능 테스트",
        "priority": "high",
        "dependencies": [
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "씬(Scene) 관리 기능 - 백엔드",
        "description": "씬 업로드, 순서 변경, 버전 관리 등의 백엔드 기능 구현",
        "details": "1. Scene 모듈 생성\n2. Scene 컨트롤러 및 서비스 구현\n3. 씬 CRUD 엔드포인트 구현\n4. 다중 파일 업로드 처리 구현\n5. 씬 순서 변경 API 구현\n6. 버전 관리 시스템 구현\n7. 썸네일 자동 생성 기능 구현 (sharp 라이브러리 사용)\n8. 버전 히스토리 API 구현\n9. 일괄 작업 API 구현 (선택, 삭제, 이동)\n10. 파일 메타데이터 추출 및 저장",
        "testStrategy": "단위 테스트: 씬 생성, 수정, 삭제\n통합 테스트: 파일 업로드 및 버전 관리\n썸네일 생성 테스트\n순서 변경 및 일괄 작업 테스트",
        "priority": "medium",
        "dependencies": [
          2,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "씬(Scene) 관리 기능 - 프론트엔드",
        "description": "씬 업로드, 순서 변경, 버전 관리 등의 프론트엔드 기능 구현",
        "details": "1. 씬 목록 페이지 구현 (/studios/[id]/projects/[projectId]/scenes)\n2. 씬 상세 페이지 구현 (/studios/[id]/projects/[projectId]/scenes/[sceneId])\n3. 드래그앤드롭 파일 업로드 구현 (react-dropzone 사용)\n4. 씬 순서 변경 드래그앤드롭 UI 구현 (react-beautiful-dnd 사용)\n5. 버전 히스토리 UI 구현\n6. 썸네일 그리드 뷰 구현\n7. 일괄 작업 UI 구현 (선택, 삭제, 이동)\n8. 업로드 진행 상태 표시 UI\n9. 이미지 프리뷰 컴포넌트 구현\n10. 버전 비교 뷰 구현",
        "testStrategy": "컴포넌트 테스트: 각 페이지 렌더링\n통합 테스트: 파일 업로드 및 관리 플로우\n드래그앤드롭 기능 테스트\n버전 관리 UI 테스트",
        "priority": "medium",
        "dependencies": [
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "파일 관리 시스템 구현",
        "description": "파일 업로드, 저장, 최적화 및 썸네일 생성 시스템 구현",
        "details": "1. Volume 기반 파일 저장소 설정\n2. 파일 업로드 서비스 구현\n3. 이미지 처리 서비스 구현 (sharp 라이브러리 사용)\n4. 이미지 최적화 및 압축 구현\n5. 썸네일 자동 생성 구현 (다양한 크기)\n6. PDF 처리 및 썸네일 생성 구현\n7. 파일 타입 검증 미들웨어 구현 (JPEG, PNG, WebP, PDF)\n8. 파일 메타데이터 추출 및 저장\n9. 파일 스트리밍 서비스 구현\n10. 대용량 파일 처리 최적화",
        "testStrategy": "단위 테스트: 파일 업로드 및 저장\n통합 테스트: 이미지 처리 및 최적화\n썸네일 생성 테스트\n파일 타입 검증 테스트\n대용량 파일 처리 성능 테스트",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "협업 기능 - 댓글 시스템 구현",
        "description": "위치 기반 댓글 및 스레드 시스템 구현",
        "details": "1. Comment 모듈 생성\n2. Comment 컨트롤러 및 서비스 구현\n3. 댓글 CRUD 엔드포인트 구현\n4. 위치 기반 댓글 저장 구현 (x, y 좌표)\n5. 댓글 스레드 구현 (parent_id 사용)\n6. 멘션 기능 구현 (@사용자)\n7. 파일 첨부 기능 구현\n8. 댓글 알림 시스템 연동\n9. 댓글 조회 및 필터링 API 구현\n10. 댓글 권한 관리 구현",
        "testStrategy": "단위 테스트: 댓글 생성, 수정, 삭제\n통합 테스트: 스레드 및 멘션 기능\n위치 기반 댓글 테스트\n파일 첨부 테스트",
        "priority": "medium",
        "dependencies": [
          2,
          9,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "협업 기능 - 댓글 UI 구현",
        "description": "위치 기반 댓글 및 스레드 UI 구현",
        "details": "1. 이미지 위 댓글 마커 UI 구현\n2. 댓글 작성 폼 구현\n3. 댓글 스레드 UI 구현\n4. 멘션 자동완성 기능 구현\n5. 파일 첨부 UI 구현\n6. 댓글 목록 컴포넌트 구현\n7. 댓글 필터링 UI 구현\n8. 이미지 위 클릭하여 댓글 추가 기능 구현\n9. 댓글 편집/삭제 UI 구현\n10. 댓글 알림 표시 UI 구현",
        "testStrategy": "컴포넌트 테스트: 댓글 UI 렌더링\n통합 테스트: 댓글 작성 및 표시 플로우\n위치 기반 마커 테스트\n멘션 및 파일 첨부 테스트",
        "priority": "medium",
        "dependencies": [
          10,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "실시간 기능 - WebSocket 서버 구현",
        "description": "WebSocket 기반 실시간 통신 서버 구현",
        "details": "1. NestJS WebSocket 게이트웨이 구현\n2. 사용자 연결 관리 구현\n3. 룸 기반 메시지 브로드캐스팅 구현 (프로젝트/씬별 룸)\n4. 실시간 이벤트 타입 정의 (댓글, 씬 업데이트, 사용자 활동 등)\n5. 메시지 직렬화/역직렬화 구현\n6. 연결 상태 관리 및 재연결 로직\n7. 인증 통합 (JWT 검증)\n8. 타이핑 인디케이터 이벤트 처리\n9. 온라인 사용자 추적 및 브로드캐스팅\n10. 이벤트 로깅 및 모니터링",
        "testStrategy": "단위 테스트: 메시지 처리 및 브로드캐스팅\n통합 테스트: 클라이언트-서버 통신\n인증 테스트\n재연결 및 오류 처리 테스트",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "실시간 기능 - WebSocket 클라이언트 구현",
        "description": "WebSocket 기반 실시간 통신 클라이언트 구현",
        "details": "1. WebSocket 클라이언트 서비스 구현 (socket.io-client 사용)\n2. 연결 관리 및 재연결 로직 구현\n3. 이벤트 핸들러 등록 시스템 구현\n4. 실시간 알림 처리 구현\n5. 타이핑 인디케이터 UI 및 이벤트 발송 구현\n6. 온라인 사용자 표시 UI 구현\n7. 실시간 댓글 업데이트 통합\n8. 실시간 씬 업데이트 통합\n9. 브라우저 알림 구현 (Notification API)\n10. 연결 상태 표시 UI 구현",
        "testStrategy": "단위 테스트: 이벤트 핸들링\n통합 테스트: 실시간 업데이트 수신\n재연결 테스트\n브라우저 알림 테스트",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "알림 시스템 구현",
        "description": "사용자 알림 시스템 구현 (실시간 및 저장)",
        "details": "1. Notification 모듈 생성\n2. Notification 컨트롤러 및 서비스 구현\n3. 알림 타입 정의 (댓글, 멘션, 초대, 업데이트 등)\n4. 알림 생성 및 저장 로직 구현\n5. 알림 조회 API 구현\n6. 알림 읽음 표시 API 구현\n7. 알림 삭제 API 구현\n8. 실시간 알림 WebSocket 연동\n9. 이메일 알림 옵션 구현\n10. 알림 설정 관리 API 구현",
        "testStrategy": "단위 테스트: 알림 생성 및 관리\n통합 테스트: 실시간 알림 전송\n이메일 알림 테스트\n알림 설정 테스트",
        "priority": "medium",
        "dependencies": [
          3,
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "알림 UI 구현",
        "description": "사용자 알림 UI 구현",
        "details": "1. 알림 드롭다운 컴포넌트 구현\n2. 알림 목록 페이지 구현 (/notifications)\n3. 알림 카운터 배지 구현\n4. 알림 읽음 표시 UI 구현\n5. 알림 타입별 아이콘 및 스타일 구현\n6. 알림 클릭 시 해당 위치로 이동 구현\n7. 실시간 알림 팝업 구현\n8. 브라우저 알림 권한 요청 및 관리\n9. 알림 설정 UI 구현\n10. 알림 없음 상태 UI 구현",
        "testStrategy": "컴포넌트 테스트: 알림 UI 렌더링\n통합 테스트: 알림 수신 및 표시\n알림 클릭 내비게이션 테스트\n설정 변경 테스트",
        "priority": "medium",
        "dependencies": [
          15,
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "데이터 영속성 및 자동 저장 구현",
        "description": "데이터 영속성 보장 및 자동 저장 기능 구현",
        "details": "1. 트랜잭션 관리 시스템 구현\n2. 낙관적 락킹 구현 (충돌 방지)\n3. 자동 저장 서비스 구현 (백엔드)\n4. 클라이언트 자동 저장 구현 (주기적 API 호출)\n5. 세션 복구 기능 구현\n6. 오프라인 모드 지원 (IndexedDB 사용)\n7. 변경 사항 큐 및 동기화 구현\n8. 충돌 해결 전략 구현\n9. 백업 시스템 구현\n10. 복구 API 구현",
        "testStrategy": "단위 테스트: 트랜잭션 및 락킹\n통합 테스트: 자동 저장 및 복구\n오프라인 모드 테스트\n충돌 해결 테스트\n백업 및 복구 테스트",
        "priority": "high",
        "dependencies": [
          9,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "이미지 뷰어 및 PDF 뷰어 구현",
        "description": "이미지 및 PDF 뷰어 컴포넌트 구현",
        "details": "1. 이미지 뷰어 컴포넌트 구현\n2. 확대/축소 기능 구현\n3. 이미지 회전 기능 구현\n4. 이미지 비교 기능 구현 (버전 간)\n5. PDF 뷰어 컴포넌트 구현 (pdf.js 사용)\n6. PDF 페이지 네비게이션 구현\n7. PDF 썸네일 네비게이션 구현\n8. 전체 화면 모드 구현\n9. 이미지/PDF 다운로드 기능 구현\n10. 모바일 터치 제스처 지원",
        "testStrategy": "컴포넌트 테스트: 뷰어 렌더링\n통합 테스트: 확대/축소 및 네비게이션\nPDF 로딩 및 페이지 이동 테스트\n모바일 제스처 테스트",
        "priority": "medium",
        "dependencies": [
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "활동 로그 및 히스토리 구현",
        "description": "사용자 활동 로그 및 히스토리 추적 시스템 구현",
        "details": "1. ActivityLog 모듈 생성\n2. ActivityLog 컨트롤러 및 서비스 구현\n3. 활동 타입 정의 (생성, 수정, 삭제, 댓글, 업로드 등)\n4. 활동 로그 자동 생성 구현 (인터셉터 사용)\n5. 활동 로그 조회 API 구현\n6. 활동 피드 API 구현 (스튜디오/프로젝트별)\n7. 활동 필터링 및 정렬 구현\n8. 사용자별 활동 조회 구현\n9. 활동 통계 API 구현\n10. 활동 로그 보관 정책 구현",
        "testStrategy": "단위 테스트: 활동 로그 생성 및 조회\n통합 테스트: 다양한 활동 추적\n필터링 및 정렬 테스트\n통계 계산 테스트",
        "priority": "low",
        "dependencies": [
          5,
          7,
          9,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "활동 로그 UI 구현",
        "description": "활동 로그 및 히스토리 UI 구현",
        "details": "1. 활동 피드 컴포넌트 구현\n2. 스튜디오 활동 피드 페이지 구현 (/studios/[id]/activity)\n3. 프로젝트 활동 피드 페이지 구현 (/studios/[id]/projects/[projectId]/activity)\n4. 활동 타입별 아이콘 및 스타일 구현\n5. 활동 필터링 UI 구현\n6. 활동 타임라인 시각화 구현\n7. 무한 스크롤 구현\n8. 활동 상세 모달 구현\n9. 사용자별 활동 필터 구현\n10. 활동 없음 상태 UI 구현",
        "testStrategy": "컴포넌트 테스트: 활동 피드 렌더링\n통합 테스트: 필터링 및 정렬\n무한 스크롤 테스트\n모달 상호작용 테스트",
        "priority": "low",
        "dependencies": [
          6,
          8,
          20
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "반응형 디자인 및 모바일 최적화",
        "description": "모바일 지원을 위한 반응형 디자인 구현",
        "details": "1. 반응형 레이아웃 시스템 구현 (CSS Grid/Flexbox)\n2. 모바일 브레이크포인트 정의 (xs, sm, md, lg, xl)\n3. 모바일 네비게이션 구현 (햄버거 메뉴)\n4. 터치 인터랙션 최적화\n5. 모바일 뷰어 최적화\n6. 모바일 폼 최적화\n7. 이미지 lazy loading 구현\n8. 모바일 성능 최적화\n9. 모바일 테스트 자동화 설정\n10. 다양한 디바이스 호환성 테스트",
        "testStrategy": "컴포넌트 테스트: 반응형 레이아웃\n통합 테스트: 다양한 화면 크기 렌더링\n터치 인터랙션 테스트\n성능 테스트 (Lighthouse)",
        "priority": "medium",
        "dependencies": [
          6,
          8,
          10,
          13,
          17,
          19,
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "성능 최적화 및 코드 분할",
        "description": "애플리케이션 성능 최적화 및 코드 분할 구현",
        "details": "1. 코드 분할 구현 (React.lazy, dynamic imports)\n2. 이미지 최적화 (WebP 변환, 크기 최적화)\n3. 번들 크기 분석 및 최적화\n4. 메모이제이션 구현 (React.memo, useMemo, useCallback)\n5. 가상 스크롤 구현 (긴 목록용)\n6. API 응답 캐싱 구현\n7. 서버 사이드 렌더링 최적화\n8. 데이터베이스 쿼리 최적화\n9. 인덱스 최적화\n10. 성능 모니터링 설정",
        "testStrategy": "성능 테스트: 로딩 시간 측정\n번들 크기 분석\n메모리 사용량 테스트\n데이터베이스 쿼리 성능 테스트",
        "priority": "medium",
        "dependencies": [
          10,
          11,
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "보안 강화 및 에러 처리",
        "description": "애플리케이션 보안 강화 및 에러 처리 시스템 구현",
        "details": "1. CORS 설정 최적화\n2. Rate limiting 구현\n3. 입력 검증 강화 (class-validator)\n4. XSS 방지 구현\n5. CSRF 보호 구현\n6. 글로벌 에러 핸들러 구현\n7. 에러 로깅 시스템 구현\n8. 사용자 친화적 에러 메시지 구현\n9. 에러 복구 전략 구현\n10. 보안 헤더 설정 (Helmet)",
        "testStrategy": "보안 테스트: XSS 및 CSRF 테스트\n입력 검증 테스트\nRate limiting 테스트\n에러 핸들링 테스트",
        "priority": "high",
        "dependencies": [
          3,
          5,
          7,
          9,
          11,
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "배포 파이프라인 및 환경 설정",
        "description": "Railway 배포 파이프라인 및 환경 설정 구현",
        "details": "1. Railway 프로젝트 설정\n2. PostgreSQL 데이터베이스 설정\n3. Volume 스토리지 설정\n4. 환경 변수 관리 시스템 구현\n5. CI/CD 파이프라인 설정 (GitHub Actions)\n6. 자동 테스트 및 배포 구성\n7. 스테이징 환경 설정\n8. 프로덕션 환경 설정\n9. 모니터링 및 로깅 설정 (Sentry)\n10. 백업 및 복구 프로세스 설정",
        "testStrategy": "배포 테스트: 스테이징 환경 배포\n환경 변수 검증\nCI/CD 파이프라인 테스트\n롤백 테스트",
        "priority": "high",
        "dependencies": [
          1,
          2,
          11,
          18,
          24
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-05T04:08:19.961Z",
      "updated": "2025-09-05T04:44:47.851Z",
      "description": "Tasks for master context"
    }
  }
}